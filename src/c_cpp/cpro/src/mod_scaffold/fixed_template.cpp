#include "fixed_template.h"

// 生成C++头文件内容
std::string generate_cpp_header(const std::string& className, const std::string& guardName) {
    std::string content =
        "#ifndef " + guardName + "\n"
        "#define " + guardName + "\n\n"
        "/**\n"
        " * @class " + className + "\n"
        " * @brief 示例类模板\n"
        " */\n"
        "class " + className + " {\n"
        "public:\n"
        "    /**\n"
        "     * @brief 默认构造函数\n"
        "     */\n"
        "    " + className + "(void);\n\n"
        "    /**\n"
        "     * @brief 拷贝构造函数\n"
        "     * @param other 拷贝源对象\n"
        "     */\n"
        "    " + className + "(const " + className + "& other);\n\n"
        "    /**\n"
        "     * @brief 析构函数\n"
        "     */\n"
        "    ~" + className + "(void);\n\n"
        "    /**\n"
        "     * @brief 赋值运算符重载\n"
        "     * @param other 赋值源对象\n"
        "     * @return " + className + "& 当前对象的引用\n"
        "     */\n"
        "    " + className + "& operator=(const " + className + "& other);\n\n"
        "    /**\n"
        "     * @brief 初始化函数\n"
        "     * @return int 错误码，0表示成功\n"
        "     */\n"
        "    int init(void);\n\n"
        "    /**\n"
        "     * @brief 示例成员函数\n"
        "     * @param param1 第一个参数\n"
        "     * @param param2 第二个参数\n"
        "     * @param param3 第三个参数\n"
        "     * @return int 计算结果\n"
        "     */\n"
        "    int example_method(int param1, \n"
        "                       int param2, \n"
        "                       int param3);\n\n"
        "protected:\n"
        "    // 保护成员区域\n\n"
        "private:\n"
        "    int member_var_;   // 示例成员变量\n"
        "};\n\n"
        "#endif // " + guardName + "\n";
    return content;
}

// 生成C++源文件内容
std::string generate_cpp_source(const std::string& className, const std::string& fileName) {
    std::string content =
        "#include \"" + fileName + ".h\"\n\n"
        "/**\n"
        " * @brief 默认构造函数\n"
        " */\n"
        + className + "::" + className + "(void) : member_var_(0) {}\n\n"
        "/**\n"
        " * @brief 拷贝构造函数\n"
        " * @param other 拷贝源对象\n"
        " */\n"
        + className + "::" + className + "(const " + className + "& other) : member_var_(other.member_var_) {}\n\n"
        "/**\n"
        " * @brief 析构函数\n"
        " */\n"
        + className + "::~" + className + "(void) {}\n\n"
        "/**\n"
        " * @brief 赋值运算符重载\n"
        " * @param other 赋值源对象\n"
        " * @return " + className + "& 当前对象的引用\n"
        " */\n"
        + className + "& " + className + "::operator=(const " + className + "& other) {\n"
        "    if (this != &other) {\n"
        "        member_var_ = other.member_var_;\n"
        "    }\n"
        "    return *this;\n"
        "}\n\n"
        "/**\n"
        " * @brief 初始化函数\n"
        " * @return int 错误码，0表示成功\n"
        " */\n"
        "int " + className + "::init(void) {\n"
        "    // 初始化代码\n"
        "    return 0;\n"
        "}\n\n"
        "/**\n"
        " * @brief 示例成员函数\n"
        " * @param param1 第一个参数\n"
        " * @param param2 第二个参数\n"
        " * @param param3 第三个参数\n"
        " * @return int 计算结果\n"
        " */\n"
        "int " + className + "::example_method(int param1, \n"
        "                                  int param2, \n"
        "                                  int param3) {\n"
        "    return param1 + param2 + param3;\n"
        "}\n";
    return content;
}

// 生成C头文件内容
std::string generate_c_header(const std::string& guardName) {
    std::string content =
        "#ifndef " + guardName + "\n"
        "#define " + guardName + "\n\n"
        "/**\n"
        " * @brief 示例函数\n"
        " * @return int 状态码\n"
        " */\n"
        "int example_func(void);\n\n"
        "/**\n"
        " * @brief 复杂参数示例函数\n"
        " * @param param1 第一个参数\n"
        " * @param param2 第二个参数\n"
        " * @param param3 第三个参数\n"
        " * @return float 计算结果\n"
        " */\n"
        "float complex_func(int param1, \n"
        "                   long param2, \n"
        "                   double param3);\n\n"
        "#endif // " + guardName + "\n";
    return content;
}

// 生成C源文件内容
std::string generate_c_source(const std::string& fileName) {
    std::string content =
        "#include \"" + fileName + ".h\"\n"
        "#include <stdio.h>\n\n"
        "/**\n"
        " * @brief 示例函数\n"
        " * @return int 状态码\n"
        " */\n"
        "int example_func(void) {\n"
        "    printf(\"Hello from C!\\n\");\n"
        "    return 0;\n"
        "}\n\n"
        "/**\n"
        " * @brief 复杂参数示例函数\n"
        " * @param param1 第一个参数\n"
        " * @param param2 第二个参数\n"
        " * @param param3 第三个参数\n"
        " * @return float 计算结果\n"
        " */\n"
        "float complex_func(int param1, \n"
        "                   long param2, \n"
        "                   double param3) {\n"
        "    return param1 + param2 + param3;\n"
        "}\n";
    return content;
}
